name: Build and Push Docker Image to GHCR

# 触发 workflow 的事件
on:
  push: # 当有代码推送到指定分支时触发
    branches: [ "main" ] # 更改为您的主分支名称
  # 允许手动触发
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 指定运行环境为最新的 Ubuntu

    # 定义权限，允许 workflow 写入 GitHub Packages (ghcr.io)
    permissions:
      contents: read      # 读取仓库内容
      packages: write     # 写入 GitHub Packages (ghcr.io)

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4 # 使用官方的 checkout action

      # 登录到 GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 使用触发 workflow 的用户作为用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 自动生成的 GITHUB_TOKEN 作为密码

      # 必须步骤：设置 QEMU 以支持跨平台模拟构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # 设置 Buildx 支持多架构构建
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 为 Docker 镜像提取元数据 (标签、名称等)
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/chain-subconverter

          # 定义标签规则 - 使用显式列表覆盖默认规则
          tags: |
            # 1. 如果是 Git 标签 (例如 v1.2.3)，则使用版本号
            type=semver,pattern={{version}}

            # 2. 仅在推送到 main 分支 (非 PR) 时生成 'latest' 标签
            #    通过提高优先级确保此规则生效并生成 latest
            type=ref,event=branch,enable=${{ github.ref_name == 'main' && github.event_name != 'pull_request' }},value=latest,priority=700

            # 3. 生成短 SHA 标签
            type=sha,format=short,prefix=sha-

          # 注意：因为提供了上面的显式标签列表，metadata-action 将不再自动生成分支名标签 (如 'main')。

      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的路径 (当前目录)
          file: ./Dockerfile # Dockerfile 文件名 (如果不是标准的 Dockerfile)
          push: ${{ github.event_name != 'pull_request' }} # 只在不是 PR 事件时推送 (即 push 到分支或手动触发时)
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上一步生成的标签
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha # 启用 GitHub Actions 的构建缓存
          cache-to: type=gha,mode=max # 写入缓存